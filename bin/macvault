#!/usr/bin/env ruby

# Command: macvault
# Purpose: Register/Create new backups, inspect and restore existing backups.

require 'optparse'

options = {}
optparse = OptionParser.new do |opts|
  opts.banner = "Usage: #{$0} [OPTIONS] [LOCATION]"

  options[:verbose] = false
  opts.on( '-v', '--verbose', "Show me what you're doing" ) do
    options[:verbose] = true
  end

  opts.on('--setup', "Waits for a volume to be mounted in /Volumes, then selects that volume as the backup volume.") do
    options[:action] = 'setup'
  end

  opts.on('--here', "Start backing up this directory.") do
    options[:action] = 'here'
  end

  opts.on('--frequency FREQ', "Maximum frequency of backups on this location.") do |freq|
    options[:frequency] = freq.gsub(/\D/,'').to_i
  end

  options[:mode] = 'git'
  opts.on('--mode MODE', "Specify the backup mode.\n\t'git' : [default] backs up everything in a git repo. Every backup creates a complete restore point.\n\t'rsync' : keeps an identical copy in the backup location. Faster to backup, NO live history is kept, NO compression.") do |mode|
    options[:mode] = mode
  end

  opts.on('--history', "Show backup history." ) do
    options[:action] = 'history'
  end

  opts.on('--restore', "Restore this backup to its original location. Add a location to use a new location.") do
    options[:action] = 'restore'
    options[:fresh] = false
  end

  opts.on('--fresh', "Do not backup before restoring. Use only with --restore.") do
    if options[:action] != 'restore'
      puts "Use --fresh only with --restore option."
      exit
    end
    options[:fresh] = true
  end

  options[:time] = nil
  opts.on('--time TIME', "Reference the backup at specified TIME.") do |time|
    options[:time] = time
  end

  opts.on('-h', '--help', 'Display this screen' ) do
    puts opts
    exit
  end
end


# Get the backup volume, or configure it, before moving on.
require 'yaml'
unless File.exists?("#{ENV['HOME']}/.MacVault")
  pwd = Dir.pwd
  Dir.chdir('/Volumes')
  puts "No backup volume configured. Please connect, or reconnect the volume you want to use as a backup volume..."
  volumes = Dir.glob("*")
  begin
    current_volumes = volumes
    volumes = Dir.glob("*")
    sleep 1
  end until volumes.length > current_volumes.length
  backup_volume = (volumes - current_volumes)[0]

  # Create the MacVault directory
  `mkdir -p "/Volumes/#{backup_volume}/MacVault"`

  # Save the backup volume configuration
  File.open("#{ENV['HOME']}/.MacVault", 'w') do |f|
    f << {:backup_volume => backup_volume}.to_yaml
  end

  `mkdir -p #{ENV['HOME']}/Library/LaunchAgents`
  # Add the launchctl task
  File.open("#{ENV['HOME']}/Library/LaunchAgents/com.behindlogic.MacVault.plist", 'w') do |f|
    f << <<-EOPLIST
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC -//Apple Computer//DTD PLIST 1.0//EN http://www.apple.com/DTDs/PropertyList-1.0.dtd >
<plist version="1.0">
  <dict>
    <key>Label</key>
    <string>com.behindlogic.MacVault</string>
    <key>Program</key>
    <string>/usr/local/bin/macvault-task</string>
    <key>KeepAlive</key>
    <dict>
      <key>PathState</key>
      <dict>
        <key>/Volumes/#{backup_volume}/MacVault</key>
        <true/>
      </dict>
    </dict>
    <key>WorkingDirectory</key>
    <string>/Volumes/#{backup_volume}/MacVault</string>
    <key>ExitTimeOut</key>
    <integer>0</integer>
    <key>ThrottleInterval</key>
    <integer>300</integer>
    <key>QueueDirectories</key>
    <array>
      <string>/Volumes/#{backup_volume}/MacVault</string>
    </array>
    <key>StartOnMount</key>
    <true/>
  </dict>
</plist>
EOPLIST
  end
  `launchctl unload "#{ENV['HOME']}/Library/LaunchAgents/com.behindlogic.MacVault.plist"`
  `launchctl load "#{ENV['HOME']}/Library/LaunchAgents/com.behindlogic.MacVault.plist"`
  puts "Added #{backup_volume.inspect} as a backup volume."
  Dir.chdir(pwd)
end
config = YAML.load_file("#{ENV['HOME']}/.MacVault")



current_dir = Dir.pwd
dir_leaf = current_dir.match(/([^\/]+)\/?$/)[1]
$git = "GIT_DIR=\"/Volumes/#{config[:backup_volume]}/MacVault/#{dir_leaf}/.git\" git"



if ARGV[0] == 'git'
  puts "sh -c \"GIT_DIR=\\\"/Volumes/#{config[:backup_volume]}/MacVault/#{dir_leaf}/.git\\\" #{ARGV.join(' ')}\""
  exec "sh -c \"GIT_DIR=\\\"/Volumes/#{config[:backup_volume]}/MacVault/#{dir_leaf}/.git\\\" #{ARGV.join(' ')}\""
end

begin
  optparse.parse!
rescue => e
  puts e
  exit
end

require 'time'
options[:time] = Time.parse(options[:time]) if options[:time]
options[:location] = ARGV[0] if ARGV[0]

# puts "Options: #{options.inspect}"



case options[:action]
when 'here'
  `mkdir -p "/Volumes/#{config[:backup_volume]}/MacVault/#{dir_leaf}"`
  Dir.chdir("/Volumes/#{config[:backup_volume]}/MacVault/#{dir_leaf}")
  unless File.exists?('.git')
    `git init`
    `git config core.compression 9`
    `git config gc.auto 1000`
    `git config repack.usedeltabaseoffset true`
    `git config core.ignorecase false`
  end
  `git config core.x-backup-location "#{current_dir.gsub(/#{ENV['HOME']}/,'$HOME')}"`
  `git config core.x-backup-frequency "#{options[:frequency] || 300}"`
  # Set mode (git|rsync)
  `git config core.x-backup-mode "#{options[:mode]}"`
  Dir.chdir(current_dir)
  `echo ".DS_Store" >> .gitignore` unless File.exists?('.gitignore') && File.read('.gitignore') =~ /\.DS_Store/m
  # Ignore Caches too...
  `echo "Caches" >> .gitignore` unless File.read('.gitignore') =~ /Caches/m
  unless `#{$git} log -n 1 2>/dev/null` && $?.success?
    `#{$git} add .gitignore`
    system "#{$git} commit -m \"New backup location created.\""
  end
  puts "#{current_dir} will be backed up to /Volumes/#{config[:backup_volume]}/MacVault/#{dir_leaf}\n\t- whenever #{config[:backup_volume]} is present#{"\n\t- at most every #{options[:frequency]} seconds" if options[:frequency]}"
when 'history'
  puts `#{$git} whatchanged -10`
when 'restore'
  warn "THIS FEATURE IS NOT YET OFFICIALLY FUNCTIONAL!"
  exit

  # To be run from inside a backup directory
  src_location = `#{$git} config core.x-backup-location`.chomp.gsub(/\$HOME/,ENV['HOME'])
  `mkdir -p "#{src_location}"`
  
  restore_path = options[:location] || src_location
  Dir.chdir(restore_path)
  `mv .git .git.bak` if File.exists?('.git')
  `ln -s "/Volumes/#{config[:backup_volume]}/MacVault/#{dir_leaf}/.git" .git`
  if options[:fresh]
    restore_version = 'master'
  else
    puts "Backing up first..."
    `git checkout -b "Pre-restore #{Time.now.strftime("%Y-%m-%d %H:%M:%S")}"`
    `git add --all`
    `git commit -m "Pre-restore Backup"`
    `git checkout master`
    restore_version = 'master'
  end
  puts "Restoring #{restore_path}..."
  `git reset --hard \"#{restore_version}\"`
  puts "Backing up again..."
  `git add --all`
  `git commit -m "Post-restore Backup"`
  `rm .git`
when 'restore-all'
  warn "THIS FEATURE IS NOT YET OFFICIALLY FUNCTIONAL!"
  exit
  if File.directory?("/Volumes/#{config[:backup_volume]}/MacVault")
    puts "[#{Time.now}] Restoring everything from backup..."
    puts "  ** THIS IS DESTRUCTIVE - You have 10 seconds to hit Ctrl+C..."
    sleep 10
    puts "Beginning full restore..."
    $stdout.flush
    Dir.glob("/Volumes/#{config[:backup_volume]}/MacVault/*").select {|d| File.directory?(d)}.each do |backup_dir|
      Dir.chdir(backup_dir)
      puts "In (#{Dir.pwd})"
      puts `git checkout -- .git-backup-location`
      src_location = File.read('.git-backup-location').chomp.gsub(/\$HOME/,ENV['HOME'])
      Dir.chdir(src_location)
      puts "\tIn (#{Dir.pwd})"
      puts "\tgit add --all"
      system "GIT_DIR=\"#{backup_dir}/.git\" git add --all -v"
      puts "\tgit commit -m \"Regular Backup\""
      system "GIT_DIR=\"#{backup_dir}/.git\" git commit -m \"Regular Backup\""
    end
    last_backup = Time.now
    `echo "#{last_backup.to_s}" > "$HOME/.MacVault-last-backup"`
    puts " ..done! at [#{Time.now}]\n"
  else
    
  end
end
