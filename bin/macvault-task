#!/usr/bin/env ruby

# Command: macvault-task
# Purpose: Perform all backups that are readily available.

require 'time'
require 'yaml'


ENV["PATH"] = '/usr/local/bin:/opt/local/bin:' + ENV["PATH"]

config = YAML.load_file("#{ENV['HOME']}/.MacVault")

if File.directory?("/Volumes/#{config[:backup_volume]}/MacVault")
  puts "MacVault volume present: #{config[:backup_volume]}"

  $stderr.close
  $stderr = File.open("/Volumes/#{config[:backup_volume]}/MacVault/Backup.log", 'a')
  $stderr <<  "[#{Time.now}] Begin Backup\n"

  backups_count = 0

  Dir.glob("/Volumes/#{config[:backup_volume]}/MacVault/*").select {|d| File.directory?(d)}.each do |backup_dir|
    $stderr << "\tBacking up #{backup_dir.match(/([^\/]+)$/)[1]}..."
    $stderr.flush

    Dir.chdir(backup_dir)
    puts "In (#{Dir.pwd})"
    $git = "GIT_DIR=\"#{backup_dir}/.git\" git"
    frequency = `#{$git} config core.x-backup-frequency`.chomp.to_i
    last_backup = `#{$git} config core.x-last-backup`.chomp; last_backup = last_backup.length > 0 ? Time.parse(last_backup) : Time.now - (frequency+60)
    mode = `#{$git} config core.x-backup-mode`.chomp
    if last_backup + frequency < Time.now - 10 # Give it 10 seconds of lee-way.
      src_location = `#{$git} config core.x-backup-location`.chomp.gsub(/\$HOME/,ENV['HOME'])
      system "#{$git} config core.x-last-backup \"#{Time.now}\""
      Dir.chdir(src_location)
      puts "\tIn (#{Dir.pwd})"
      case mode
      when 'git'
        puts "\tgit add --all -v"
        system "#{$git} add --all -v"
        puts "\tgit commit -m \"Regular Backup\""
        system "#{$git} commit -m \"Regular Backup\""
      when 'rsync'
        # warn "Warning - RSYNC mode is not yet complete! (skipping backup now)"
        # Just syncronize files...
        # This currently just deletes deleted files. I'd like it to actually sync without deleting, then take the list
        # of deleted files and archive them compressed into the git repo; then delete them from the live copy.
        system "rsync -a --delete --exclude-from=\"#{src_location}/.gitignore\" \"#{src_location}/\" \"#{backup_dir}/\""
      end
      $stderr <<  " .. done at [#{Time.now}]\n"
      backups_count += 1
    else
      $stderr << " (no need - backed up recently)\n"
    end
  end

  $stderr <<  "[#{Time.now}] Backup Complete\n"
  `say -v Trinoids "Backed up #{backups_count} location#{'s' if backups_count > 1}."` if backups_count > 0
else
  warn "[#{Time.now}] dry run\n"
end
$stderr.close
exit
